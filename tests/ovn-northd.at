AT_BANNER([OVN northd])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check from NBDB to SBDB])
ovn_start

ovn-nbctl create Logical_Router name=R1
ovn-sbctl chassis-add gw1 geneve 127.0.0.1
ovn-sbctl chassis-add gw2 geneve 1.2.4.8

# Connect alice to R1 as distributed router gateway port on hv2
ovn-nbctl lrp-add R1 alice 00:00:02:01:02:03 172.16.1.1/24

ovn-nbctl --wait=sb \
    --id=@gc0 create Gateway_Chassis name=alice_gw1 \
                                     chassis_name=gw1 \
                                     priority=20 -- \
    --id=@gc1 create Gateway_Chassis name=alice_gw2 \
                                     chassis_name=gw2 \
                                     priority=10 -- \
    set Logical_Router_Port alice 'gateway_chassis=[@gc0,@gc1]'

nb_gwc1_uuid=`ovn-nbctl --bare --columns _uuid find Gateway_Chassis name="alice_gw1"`

# With the new ha_chassis_group table added, there should be no rows in
# gateway_chassis table in SB DB.
AT_CHECK([ovn-sbctl list gateway_chassis | wc -l], [0], [0
])

# There should be one ha_chassis_group with the name "alice"
ha_chassi_grp_name=`ovn-sbctl --bare --columns name find \
ha_chassis_group name="alice"`

AT_CHECK([test $ha_chassi_grp_name = alice])

ha_chgrp_uuid=`ovn-sbctl --bare --columns _uuid find ha_chassis_group name=alice`

AT_CHECK([ovn-sbctl --bare --columns ha_chassis_group find port_binding \
logical_port="cr-alice" | grep $ha_chgrp_uuid | wc -l], [0], [1
])

# There should be one ha_chassis_group with the name "alice"
ha_chassi_grp_name=`ovn-sbctl --bare --columns name find \
ha_chassis_group name="alice"`

AT_CHECK([test $ha_chassi_grp_name = alice])

ha_chgrp_uuid=`ovn-sbctl --bare --columns _uuid find ha_chassis_group name=alice`

AT_CHECK([ovn-sbctl --bare --columns ha_chassis_group find port_binding \
logical_port="cr-alice" | grep $ha_chgrp_uuid | wc -l], [0], [1
])

ha_ch=`ovn-sbctl --bare --columns ha_chassis  find ha_chassis_group`
# Trim the spaces.
ha_ch=`echo $ha_ch | sed 's/ //g'`

ha_ch_list=''
for i in `ovn-sbctl --bare --columns _uuid list ha_chassis | sort`
do
    ha_ch_list="$ha_ch_list $i"
done

# Trim the spaces.
ha_ch_list=`echo $ha_ch_list | sed 's/ //g'`

AT_CHECK([test "$ha_ch_list" = "$ha_ch"])

# Delete chassis - gw2 in SB DB.
# ovn-northd should not recreate ha_chassis rows
# repeatedly when gw2 is deleted.
ovn-sbctl chassis-del gw2

ha_ch_list_1=''
for i in `ovn-sbctl --bare --columns _uuid list ha_chassis | sort`
do
    ha_ch_list_1="$ha_ch_list_1 $i"
done

# Trim the spaces.
ha_ch_list_1=`echo $ha_ch_list_1 | sed 's/ //g'`

ha_ch_list_2=''
for i in `ovn-sbctl --bare --columns _uuid list ha_chassis | sort`
do
    ha_ch_list_2="$ha_ch_list_2 $i"
done

# Trim the spaces.
ha_ch_list_2=`echo $ha_ch_list_2 | sed 's/ //g'`

AT_CHECK([test "$ha_ch_list_1" = "$ha_ch_list_2"])

# Add back the gw2 chassis
ovn-sbctl chassis-add gw2 geneve 1.2.4.8

# delete the 2nd Gateway_Chassis on NBDB for alice port
gw_ch=`ovn-sbctl --bare --columns gateway_chassis find port_binding \
logical_port="cr-alice"`
AT_CHECK([test "$gw_ch" = ""])

ha_ch=`ovn-sbctl --bare --columns ha_chassis  find ha_chassis_group`
ha_ch=`echo $ha_ch | sed 's/ //g'`
# Trim the spaces.
echo "ha ch in grp = $ha_ch"

ha_ch_list=''
for i in `ovn-sbctl --bare --columns _uuid list ha_chassis | sort`
do
    ha_ch_list="$ha_ch_list $i"
done

# Trim the spaces.
ha_ch_list=`echo $ha_ch_list | sed 's/ //g'`

AT_CHECK([test "$ha_ch_list" = "$ha_ch"])

# delete the 2nd Gateway_Chassis on NBDB for alice port
ovn-nbctl --wait=sb set Logical_Router_Port alice gateway_chassis=${nb_gwc1_uuid}

# There should be only 1 row in ha_chassis SB DB table.
AT_CHECK([ovn-sbctl --bare --columns _uuid list ha_chassis | wc -l], [0], [1
])

AT_CHECK([ovn-sbctl list gateway_chassis | wc -l], [0], [0
])

# There should be only 1 row in ha_chassis SB DB table.
AT_CHECK([ovn-sbctl --bare --columns _uuid list ha_chassis | wc -l], [0], [1
])

# delete all the gateway_chassis on NBDB for alice port

ovn-nbctl --wait=sb clear Logical_Router_Port alice gateway_chassis

# expect that the ha_chassis doesn't exist anymore
AT_CHECK([ovn-sbctl list gateway_chassis | wc -l], [0], [0
])

AT_CHECK([ovn-sbctl list ha_chassis | wc -l], [0], [0
])

AT_CHECK([ovn-sbctl list ha_chassis_group | wc -l], [0], [0
])

# expect that the ha_chassis doesn't exist anymore
AT_CHECK([ovn-sbctl list ha_chassis | wc -l], [0], [0
])
AT_CHECK([ovn-sbctl list ha_chassis_group | wc -l], [0], [0
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check up state of VIF LSP])
ovn_start

ovn-nbctl ls-add S1
ovn-nbctl --wait=sb lsp-add S1 S1-vm1
AT_CHECK([test x`ovn-nbctl lsp-get-up S1-vm1` = xdown])

ovn-sbctl chassis-add hv1 geneve 127.0.0.1
ovn-sbctl lsp-bind S1-vm1 hv1

OVS_WAIT_UNTIL([test x`ovn-nbctl lsp-get-up S1-vm1` = xup])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check up state of router LSP linked to a distributed LR])
ovn_start

ovn-nbctl lr-add R1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 02:ac:10:01:00:01
ovn-nbctl --wait=sb lsp-set-options S1-R1 router-port=R1-S1
AT_CHECK([test x`ovn-nbctl lsp-get-up S1-R1` = xup])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check up state of router LSP linked to a gateway LR])
ovn_start

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl create Logical_Router name=R1 options:chassis=gw1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 02:ac:10:01:00:01
ovn-nbctl --wait=sb lsp-set-options S1-R1 router-port=R1-S1

ovn-sbctl lsp-bind S1-R1 gw1
AT_CHECK([test x`ovn-nbctl lsp-get-up S1-R1` = xup])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check up state of router LSP linked to an LRP with set Gateway Chassis])
ovn_start

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl lr-add R1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24
ovn-nbctl lrp-set-gateway-chassis R1-S1 gw1

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 router
ovn-nbctl --wait=sb lsp-set-options S1-R1 router-port=R1-S1
AT_CHECK([test x`ovn-nbctl lsp-get-up S1-R1` = xup])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check IPv6 RA config propagation to SBDB])
ovn_start

ovn-nbctl lr-add ro
ovn-nbctl lrp-add ro ro-sw 00:00:00:00:00:01 aef0:0:0:0:0:0:0:1/64
ovn-nbctl ls-add sw
ovn-nbctl lsp-add sw sw-ro
ovn-nbctl lsp-set-type sw-ro router
ovn-nbctl lsp-set-options sw-ro router-port=ro-sw
ovn-nbctl lsp-set-addresses sw-ro 00:00:00:00:00:01
ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:send_periodic=true
ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:address_mode=slaac
ovn-nbctl --wait=sb set Logical_Router_Port ro-sw ipv6_ra_configs:mtu=1280

uuid=$(ovn-sbctl --columns=_uuid --bare find Port_Binding logical_port=ro-sw)

AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_send_periodic],
[0], ["true"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_address_mode],
[0], [slaac
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[0], ["600"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[0], ["200"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_mtu],
[0], ["1280"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_src_eth],
[0], ["00:00:00:00:00:01"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_src_addr],
[0], ["fe80::200:ff:fe00:1"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_prefixes],
[0], ["aef0::/64"
])

ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:max_interval=300
ovn-nbctl --wait=sb set Logical_Router_Port ro-sw ipv6_ra_configs:min_interval=600

AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[0], ["300"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[0], ["225"
])

ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:max_interval=300
ovn-nbctl --wait=sb set Logical_Router_Port ro-sw ipv6_ra_configs:min_interval=250

AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[0], ["300"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[0], ["225"
])

ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:max_interval=0
ovn-nbctl --wait=sb set Logical_Router_Port ro-sw ipv6_ra_configs:min_interval=0

AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[0], ["4"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[0], ["3"
])

ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:max_interval=3600
ovn-nbctl --wait=sb set Logical_Router_Port ro-sw ipv6_ra_configs:min_interval=2400

AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[0], ["1800"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[0], ["1350"
])

ovn-nbctl --wait=sb set Logical_Router_port ro-sw ipv6_ra_configs:send_periodic=false

AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_send_periodic],
[1], [], [ovn-sbctl: no key "ipv6_ra_send_periodic" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[1], [], [ovn-sbctl: no key "ipv6_ra_max_interval" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[1], [], [ovn-sbctl: no key "ipv6_ra_min_interval" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_mtu],
[1], [], [ovn-sbctl: no key "ipv6_ra_mtu" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_address_mode],
[1], [], [ovn-sbctl: no key "ipv6_ra_address_mode" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_src_eth],
[1], [], [ovn-sbctl: no key "ipv6_ra_src_eth" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_src_addr],
[1], [], [ovn-sbctl: no key "ipv6_ra_src_addr" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_prefixes],
[1], [], [ovn-sbctl: no key "ipv6_ra_prefixes" in Port_Binding record "${uuid}" column options
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- test unixctl])
ovn_init_db ovn-sb; ovn-sbctl init
ovn_init_db ovn-nb; ovn-nbctl init

# test unixctl option
mkdir "$ovs_base"/northd
as northd start_daemon NORTHD_TYPE --unixctl="$ovs_base"/northd/NORTHD_TYPE[].ctl --ovnnb-db=unix:"$ovs_base"/ovn-nb/ovn-nb.sock --ovnsb-db=unix:"$ovs_base"/ovn-sb/ovn-sb.sock
ovn-nbctl ls-add sw
ovn-nbctl --wait=sb lsp-add sw p1
# northd created with unixctl option successfully created port_binding entry
AT_CHECK([ovn-sbctl --bare --columns datapath find port_binding logical_port="p1" | wc -l], [0], [1
])
AT_CHECK([ovn-nbctl --wait=sb lsp-del p1])

# ovs-appctl exit with unixctl option
OVS_APP_EXIT_AND_WAIT_BY_TARGET(["$ovs_base"/northd/NORTHD_TYPE[].ctl], ["$ovs_base"/northd/NORTHD_TYPE[].pid])

# Check no port_binding entry for new port as ovn-northd is not running
ovn-nbctl lsp-add sw p2
ovn-nbctl --timeout=10 --wait=sb sync
AT_CHECK([ovn-sbctl --bare --columns datapath find port_binding logical_port="p2" | wc -l], [0], [0
])

# test default unixctl path
as northd start_daemon NORTHD_TYPE --ovnnb-db=unix:"$ovs_base"/ovn-nb/ovn-nb.sock --ovnsb-db=unix:"$ovs_base"/ovn-sb/ovn-sb.sock
ovn-nbctl --wait=sb lsp-add sw p3
# northd created with default unixctl path successfully created port_binding entry
AT_CHECK([ovn-sbctl --bare --columns datapath find port_binding logical_port="p3" | wc -l], [0], [1
])

as ovn-sb
OVS_APP_EXIT_AND_WAIT([ovsdb-server])
as ovn-nb
OVS_APP_EXIT_AND_WAIT([ovsdb-server])
as northd
OVS_APP_EXIT_AND_WAIT([NORTHD_TYPE])

AT_CLEANUP
])


OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check HA_Chassis_Group propagation from NBDB to SBDB])
ovn_start

check ovn-nbctl --wait=sb ha-chassis-group-add hagrp1

# ovn-northd should not create HA chassis group and HA chassis rows
# unless the HA chassis group in OVN NB DB is associated to
# a logical router port or logical port of type external.
AT_CHECK([ovn-sbctl --bare --columns name find ha_chassis_group name="hagrp1" \
| wc -l], [0], [0
])

check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch1 30
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch2 20
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch3 10

check_row_count ha_chassis 0

# Add chassis ch1.
check ovn-sbctl chassis-add ch1 geneve 127.0.0.2

# There should be one Chassis and no HA_Chassis.
check_row_count chassis 1 name=ch1
check_row_count ha_chassis 0

# Create a logical router port and attach ha chassis group.
check ovn-nbctl lr-add lr0
check ovn-nbctl --wait=sb lrp-add lr0 lr0-public 00:00:20:20:12:13 172.168.0.100/24

hagrp1_uuid=`ovn-nbctl --bare --columns _uuid find ha_chassis_group name=hagrp1`
echo "hagrp1_uuid=$hagrp1_uuid"
check ovn-nbctl --wait=sb set logical_router_port lr0-public ha_chassis_group=$hagrp1_uuid

wait_row_count ha_chassis_group 1 name=hagrp1

# fetch_column TABLE [COLUMN [CONDITION...]]
#
# COLUMN defaults to _uuid if unspecified.
fetch_column() {
    local table=$1 column=${2-_uuid}; shift; shift
    # Wrapping this in "echo" removes spaces and newlines.
    echo $(ovn-sbctl --bare --columns $column find $table "$@" | sort)
}

check_row_count ha_chassis 3

# ovn-northd has a weird history regarding HA_Chassis and missing
# Chassis records, see commit f879850b5f2c ("ovn-northd: Fix the
# HA_Chassis sync issue in OVN SB DB").
#
# Make sure that ovn-northd doesn't recreate the ha_chassis
# records if the chassis record is missing in SB DB.
ha_ch_list_1=''
for i in `ovn-sbctl --bare --columns _uuid list ha_chassis | sort`
do
    ha_ch_list_1="$ha_ch_list_1 $i"
done
ha_ch_list_1=`echo $ha_ch_list_1 | sed 's/ //g'`

ha_ch_list_2=''
for i in `ovn-sbctl --bare --columns _uuid list ha_chassis | sort`
do
    ha_ch_list_2="$ha_ch_list_2 $i"
done
ha_ch_list_2=`echo $ha_ch_list_2 | sed 's/ //g'`

AT_CHECK([test "$ha_ch_list_1" = "$ha_ch_list_2"])

# 2 HA chassis should be created with 'chassis' column empty because
# we have not added hv1 and hv2 chassis to the SB DB.
check_row_count ha_chassis 2 'chassis=[[]]'
check_row_count ha_chassis 1 'chassis!=[[]]'

# We should have 1 ha chassis with 'chassis' column set for hv1
check_row_count ha_chassis 1 'chassis!=[[]]'

# Create another logical router port and associate to the same ha_chasis_group
check ovn-nbctl lr-add lr1
check ovn-nbctl lrp-add lr1 lr1-public 00:00:20:20:12:14 182.168.0.100/24

check ovn-nbctl set logical_router_port lr1-public ha_chassis_group=$hagrp1_uuid

# We should still have 1 HA chassis group and 3 (or 1) HA chassis in SB DB.
check_row_count ha_chassis_group 1 name=hagrp1
check_row_count ha_chassis 3

# Change the priority of ch1 - ha chassis in NB DB. It should get
# reflected in SB DB.
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch1 100
wait_row_count ha_chassis 1 priority=100

# Delete ch1 HA chassis in NB DB.
check ovn-nbctl --wait=sb ha-chassis-group-remove-chassis hagrp1 ch1
check_row_count ha_chassis 2

# Add back the ha chassis
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch1 40
wait_row_count ha_chassis 3

# Delete lr0-public. We should still have 1 HA chassis group and
# 3 HA chassis in SB DB.
check ovn-nbctl --wait=sb lrp-del lr0-public
wait_row_count ha_chassis_group 1 name=hagrp1
check_row_count ha_chassis 3

# Delete lr1-public. There should be no HA chassis group in SB DB.
check ovn-nbctl --wait=sb lrp-del lr1-public

wait_row_count ha_chassis_group 0 name=hagrp1
check_row_count ha_chassis 0

# Add lr0-public again
check ovn-nbctl lrp-add lr0 lr0-public 00:00:20:20:12:13 172.168.0.100/24
check ovn-nbctl set logical_router_port lr0-public ha_chassis_group=$hagrp1_uuid

wait_row_count ha_chassis_group 1 name=hagrp1
check_row_count ha_chassis 3

# Create a Gateway chassis. ovn-northd should ignore this.
check ovn-nbctl --wait=sb lrp-set-gateway-chassis lr0-public ch1 20

# There should be only 1 HA chassis group in SB DB with the
# name hagrp1.
check_row_count ha_chassis_group 1
check_row_count ha_chassis_group 1 name=hagrp1
check_row_count ha_chassis 3

# Now delete HA chassis group. ovn-northd should create HA chassis group
# with the Gateway chassis name
check ovn-nbctl clear logical_router_port lr0-public ha_chassis_group
check ovn-nbctl --wait=sb ha-chassis-group-del hagrp1

check_row_count ha_chassis_group 0 name=hagrp1
check_row_count ha_chassis_group 1 name=lr0-public
check_row_count ha_chassis_group 1

check ovn-nbctl --wait=sb lrp-set-gateway-chassis lr0-public ch2 10

wait_row_count ha_chassis_group 1 name=lr0-public
wait_row_count ha_chassis 2

# Test if 'ref_chassis' column is properly set or not in
# SB DB ha_chassis_group.
check ovn-nbctl ls-add sw0
check ovn-nbctl lsp-add sw0 sw0-p1

check ovn-sbctl chassis-add ch2 geneve 127.0.0.3
check ovn-sbctl chassis-add ch3 geneve 127.0.0.4
check ovn-sbctl chassis-add comp1 geneve 127.0.0.5
check ovn-sbctl chassis-add comp2 geneve 127.0.0.6

check ovn-nbctl lrp-add lr0 lr0-sw0 00:00:20:20:12:14 10.0.0.1/24
check ovn-nbctl lsp-add sw0 sw0-lr0
check ovn-nbctl lsp-set-type sw0-lr0 router
check ovn-nbctl lsp-set-addresses sw0-lr0 router
check ovn-nbctl --wait=sb lsp-set-options sw0-lr0 router-port=lr0-sw0

check ovn-sbctl lsp-bind sw0-p1 comp1
OVS_WAIT_UNTIL([test x`ovn-nbctl lsp-get-up sw0-p1` = xup])

comp1_ch_uuid=$(fetch_column chassis _uuid name=comp1)
comp2_ch_uuid=$(fetch_column chassis _uuid name=comp2)

# Check ref_chassis.
echo "comp1_ch_uuid = $comp1_ch_uuid"
OVS_WAIT_UNTIL(
    [test "$comp1_ch_uuid" = "$(fetch_column ha_chassis_group ref_chassis)"],
    [ovn-sbctl list ha_chassis_group])

# Unbind sw0-p1, make sure ref_chassis gets updated.
check ovn-sbctl lsp-unbind sw0-p1
OVS_WAIT_UNTIL([test x`ovn-nbctl lsp-get-up sw0-p1` = xdown])
OVS_WAIT_UNTIL(
    [test "" = "$(fetch_column ha_chassis_group ref_chassis)"],
    [ovn-sbctl list ha_chassis_group])

# Bind sw0-p1 in comp2
check ovn-sbctl lsp-bind sw0-p1 comp2
OVS_WAIT_UNTIL(
    [test "$comp2_ch_uuid" = "$(fetch_column ha_chassis_group ref_chassis)"],
    [ovn-sbctl list ha_chassis_group])

check ovn-nbctl ls-add sw1
check ovn-nbctl lsp-add sw1 sw1-p1
check ovn-nbctl lrp-add lr1 lr1-sw1 00:00:20:20:12:15 20.0.0.1/24
check ovn-nbctl lsp-add sw1 sw1-lr1
check ovn-nbctl lsp-set-type sw1-lr1 router
check ovn-nbctl lsp-set-addresses sw1-lr1 router
check ovn-nbctl --wait=sb lsp-set-options sw1-lr1 router-port=lr1-sw1

# Bind sw1-p1 in comp1.
check ovn-sbctl lsp-bind sw1-p1 comp1
# Wait until sw1-p1 is up
OVS_WAIT_UNTIL([test x`ovn-nbctl lsp-get-up sw1-p1` = xup])

# sw1-p1 is not connected to lr0. So comp1 should not be in 'ref_chassis'
OVS_WAIT_UNTIL(
    [test "$comp2_ch_uuid" = "$(fetch_column ha_chassis_group ref_chassis)"],
    [ovn-sbctl list ha_chassis_group])

# Now attach sw0 to lr1
check ovn-nbctl lrp-add lr1 lr1-sw0 00:00:20:20:12:16 10.0.0.10/24
check ovn-nbctl lsp-add sw0 sw0-lr1
check ovn-nbctl lsp-set-type sw0-lr1 router
check ovn-nbctl lsp-set-addresses sw0-lr1 router
check ovn-nbctl --wait=sb lsp-set-options sw0-lr1 router-port=lr1-sw0

# Both comp1 and comp2 should be in 'ref_chassis' as sw1 is indirectly
# connected to lr0
exp_ref_ch_list=$(echo $( ( echo $comp1_ch_uuid; echo $comp2_ch_uuid) | sort) )

OVS_WAIT_UNTIL(
    [test "$exp_ref_ch_list" = "$(fetch_column ha_chassis_group ref_chassis)"],
    [echo "expected $exp_ref_ch_list:"
     ovn-sbctl list ha_chassis_group])

# Unbind sw1-p1. comp2 should not be in the ref_chassis.
check ovn-sbctl lsp-unbind sw1-p1
OVS_WAIT_UNTIL([test x`ovn-nbctl lsp-get-up sw1-p1` = xdown])
OVS_WAIT_UNTIL(
    [ref_ch_list=`ovn-sbctl --bare --columns ref_chassis find ha_chassis_group | sort`
     # Trim the spaces.
     ref_ch_list=`echo $ref_ch_list | sed 's/ //g'`
     test "$comp2_ch_uuid" = "$ref_ch_list"])

# Create sw2 and attach it to lr2
check ovn-nbctl ls-add sw2
check ovn-nbctl lsp-add sw2 sw2-p1
check ovn-nbctl lr-add lr2
check ovn-nbctl lrp-add lr2 lr2-sw2 00:00:20:20:12:17 30.0.0.1/24
check ovn-nbctl lsp-add sw2 sw2-lr2
check ovn-nbctl lsp-set-type sw2-lr2 router
check ovn-nbctl lsp-set-addresses sw2-lr2 router
check ovn-nbctl --wait=sb lsp-set-options sw2-lr2 router-port=lr2-sw2

# Bind sw2-p1 to comp1
check ovn-sbctl lsp-bind sw2-p1 comp1
# Wait until sw2-p1 is up
OVS_WAIT_UNTIL([test x`ovn-nbctl lsp-get-up sw2-p1` = xup])

# sw2-p1 is not connected to lr0. So comp1 should not be in 'ref_chassis'
OVS_WAIT_UNTIL(
    [test "$comp2_ch_uuid" = "$(fetch_column ha_chassis_group ref_chassis)"],
    [echo "expected $comp2_ch_uuid:"
     ovn-sbctl list ha_chassis_group])

# Now attach sw1 to lr2. With this sw2-p1 is indirectly connected to lr0.
check ovn-nbctl lrp-add lr2 lr2-sw1 00:00:20:20:12:18 20.0.0.10/24
check ovn-nbctl lsp-add sw1 sw1-lr2
check ovn-nbctl lsp-set-type sw1-lr2 router
check ovn-nbctl lsp-set-addresses sw1-lr2 router
check ovn-nbctl --wait=sb lsp-set-options sw1-lr2 router-port=lr2-sw1

# sw2-p1 is indirectly connected to lr0. So comp1 (and comp2) should be in
# 'ref_chassis'
OVS_WAIT_UNTIL(
    [test "$exp_ref_ch_list" = "$(fetch_column ha_chassis_group ref_chassis)"],
    [echo "expected $exp_ref_ch_list:"
     ovn-sbctl list ha_chassis_group])

# Create sw0-p2 and bind it to comp1
check ovn-nbctl --wait=sb lsp-add sw0 sw0-p2
check ovn-sbctl lsp-bind sw0-p2 comp1
OVS_WAIT_UNTIL([test x`ovn-nbctl lsp-get-up sw0-p2` = xup])
OVS_WAIT_UNTIL(
    [test "$exp_ref_ch_list" = "$(fetch_column ha_chassis_group ref_chassis)"],
    [echo "expected $exp_ref_ch_list:"
     ovn-sbctl list ha_chassis_group])

# unbind sw0-p2
check ovn-sbctl lsp-unbind sw0-p2
OVS_WAIT_UNTIL([test x`ovn-nbctl lsp-get-up sw0-p2` = xdown])
OVS_WAIT_UNTIL(
    [test "$exp_ref_ch_list" = "$(fetch_column ha_chassis_group ref_chassis)"],
    [echo "expected $exp_ref_ch_list:"
     ovn-sbctl list ha_chassis_group])

# Delete lr1-sw0. comp1 should be deleted from ref_chassis as there is no link
# from sw1 and sw2 to lr0.
check ovn-nbctl lrp-del lr1-sw0

OVS_WAIT_UNTIL(
    [ref_ch_list=`ovn-sbctl --bare --columns ref_chassis find ha_chassis_group | sort`
     # Trim the spaces.
     ref_ch_list=`echo $ref_ch_list | sed 's/ //g'`
     test "$comp2_ch_uuid" = "$ref_ch_list"])

# Set redirect-chassis option to lr0-public. It should be ignored
# (because redirect-chassis is obsolete).
check ovn-nbctl set logical_router_port lr0-public options:redirect-chassis=ch1

OVS_WAIT_UNTIL([test 1 = `ovn-sbctl --bare --columns name find \
ha_chassis_group | wc -l`])

OVS_WAIT_UNTIL([test 1 = `ovn-sbctl --bare --columns name find \
ha_chassis_group name="lr0-public" | wc -l`])

ovn-sbctl --bare --columns _uuid find ha_chassis
OVS_WAIT_UNTIL([test 2 = `ovn-sbctl list ha_chassis | grep chassis | \
grep -v chassis-name | wc -l`])

# Delete the gateway chassis.
check ovn-nbctl clear logical_router_port lr0-public gateway_chassis

OVS_WAIT_UNTIL([test 0 = `ovn-sbctl list ha_chassis_group |  wc -l`])
AT_CHECK([test 0 = `ovn-sbctl list ha_chassis | wc -l`])

# Delete old sw0.
check ovn-nbctl --wait=sb ls-del sw0

# Create external logical ports and associate ha_chassis_group
check ovn-nbctl ls-add sw0
check ovn-nbctl lsp-add sw0 sw0-pext1
check ovn-nbctl lsp-add sw0 sw0-pext2
check ovn-nbctl lsp-add sw0 sw0-p1

check ovn-nbctl lsp-set-addresses sw0-pext1 "00:00:00:00:00:03 10.0.0.3"
check ovn-nbctl lsp-set-addresses sw0-pext2 "00:00:00:00:00:03 10.0.0.4"
check ovn-nbctl lsp-set-addresses sw0-p1 "00:00:00:00:00:03 10.0.0.5"

check ovn-nbctl --wait=sb ha-chassis-group-add hagrp1

check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch1 30
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch2 20
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch3 10

# ovn-northd should not create HA chassis group and HA chassis rows
# unless the HA chassis group in OVN NB DB is associated to
# a logical router port or logical port of type external.
OVS_WAIT_UNTIL([test 0 = `ovn-sbctl list ha_chassis_group |  wc -l`])
AT_CHECK([test 0 = `ovn-sbctl list ha_chassis | wc -l`])

hagrp1_uuid=`ovn-nbctl --bare --columns _uuid find ha_chassis_group \
name=hagrp1`

# The type of the lsp - sw0-pext1 is still not set to external.
# So ha_chassis_group should be ignored.
check ovn-nbctl set logical_switch_port sw0-pext1 ha_chassis_group=$hagrp1_uuid
wait_row_count ha_chassis_group 0 ha_chassis_group
check_row_count ha_chassis 0

# Set the type of sw0-pext1 to external
check ovn-nbctl lsp-set-type sw0-pext1 external

wait_row_count ha_chassis_group 1 name=hagrp1
check_row_count ha_chassis 3

sb_hagrp1_uuid=$(fetch_column ha_chassis_group _uuid name=hagrp1)
AT_CHECK([test "$sb_hagrp1_uuid" = "$(fetch_column port_binding ha_chassis_group logical_port=sw0-pext1)"])

# Set the type of sw0-pext2 to external and associate ha_chassis_group
check ovn-nbctl lsp-set-type sw0-pext2 external
check ovn-nbctl set logical_switch_port sw0-pext2 ha_chassis_group=$hagrp1_uuid
wait_row_count ha_chassis_group 1 name=hagrp1
check_row_count ha_chassis 3
AT_CHECK([test "$sb_hagrp1_uuid" = "$(fetch_column port_binding ha_chassis_group logical_port=sw0-pext1)"])

OVS_WAIT_UNTIL([test "$sb_hagrp1_uuid" = "$(fetch_column port_binding ha_chassis_group logical_port=sw0-pext2)"])

# sw0-p1 is a normal port. So ha_chassis_group should not be set
# in port_binding.
check ovn-nbctl --wait=sb set logical_switch_port sw0-p1 ha_chassis_group=$hagrp1_uuid

wait_row_count port_binding 1 logical_port=sw0-p1 'chassis=[[]]'
# Clear ha_chassis_group for sw0-pext1
check ovn-nbctl --wait=sb clear logical_switch_port sw0-pext1 ha_chassis_group

wait_row_count port_binding 1 logical_port=sw0-pext1 'chassis=[[]]'
wait_row_count ha_chassis_group 1 name=hagrp1
check_row_count ha_chassis 3

# Clear ha_chassis_group for sw0-pext2
check ovn-nbctl --wait=sb clear logical_switch_port sw0-pext2 ha_chassis_group

wait_row_count port_binding 1 logical_port=sw0-pext2 'chassis=[[]]'
wait_row_count ha_chassis_group 0
check_row_count ha_chassis 0

as ovn-sb
OVS_APP_EXIT_AND_WAIT([ovsdb-server])
as ovn-nb
OVS_APP_EXIT_AND_WAIT([ovsdb-server])
as northd
OVS_APP_EXIT_AND_WAIT([NORTHD_TYPE])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ovn-northd pause and resume])
ovn_start

get_northd_status() {
    as northd ovn-appctl -t NORTHD_TYPE is-paused
    as northd ovn-appctl -t NORTHD_TYPE status
    as northd-backup ovn-appctl -t NORTHD_TYPE is-paused
    as northd-backup ovn-appctl -t NORTHD_TYPE status
}

# Pause the backup, to force the main northd to become active (otherwise
# there's no guarantee, ovn_start is racy).
check as northd-backup ovs-appctl -t NORTHD_TYPE pause
OVS_WAIT_FOR_OUTPUT([get_northd_status], [0], [false
Status: active
true
Status: paused
])

# Resume the backup.
check as northd-backup ovs-appctl -t NORTHD_TYPE resume
OVS_WAIT_FOR_OUTPUT([get_northd_status], [0], [false
Status: active
false
Status: standby
])

# Check that ovn-northd is active, by verifying that it creates and
# destroys southbound datapaths as one would expect.
check_row_count Datapath_Binding 0
check ovn-nbctl --wait=sb ls-add sw0
check_row_count Datapath_Binding 1
check ovn-nbctl --wait=sb ls-del sw0
check_row_count Datapath_Binding 0

# Now pause the ovn-northd
check as northd ovs-appctl -t NORTHD_TYPE pause
check as northd-backup ovs-appctl -t NORTHD_TYPE pause
AT_CHECK([get_northd_status], [0], [true
Status: paused
true
Status: paused
])

# Now ovn-northd won't respond by adding a datapath, because it's paused.
check ovn-nbctl ls-add sw0
sleep 5
check_row_count Datapath_Binding 0

# Now resume ovn-northd!
check as northd ovs-appctl -t NORTHD_TYPE resume
check as northd-backup ovs-appctl -t NORTHD_TYPE resume
OVS_WAIT_FOR_OUTPUT([get_northd_status], [0], [false
Status: active
false
Status: standby
])

check ovn-nbctl --wait=sb sync
check_row_count Datapath_Binding 1

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ovn-northd restart])
ovn_start --no-backup-northd

# Check that ovn-northd is active, by verifying that it creates and
# destroys southbound datapaths as one would expect.
check_row_count Datapath_Binding 0
check ovn-nbctl --wait=sb ls-add sw0
check_row_count Datapath_Binding 1

# Kill northd.
as northd
OVS_APP_EXIT_AND_WAIT([NORTHD_TYPE])

# With ovn-northd gone, changes to nbdb won't be reflected into sbdb.
# Make sure.
check ovn-nbctl ls-add sw1
sleep 5
check_row_count Datapath_Binding 1

# Now resume ovn-northd.  Changes should catch up.
ovn_start_northd primary
wait_row_count Datapath_Binding 2

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- northbound database reconnection])
ovn_start --no-backup-northd

# Check that ovn-northd is active, by verifying that it creates and
# destroys southbound datapaths as one would expect.
check_row_count Datapath_Binding 0
check ovn-nbctl --wait=sb ls-add sw0
check_row_count Datapath_Binding 1
lf=$(count_rows Logical_Flow)

# Make nbdb ovsdb-server drop connection from ovn-northd.
conn=$(as ovn-nb ovs-appctl -t ovsdb-server ovsdb-server/list-remotes)
check as ovn-nb ovs-appctl -t ovsdb-server ovsdb-server/remove-remote "$conn"
conn2=punix:`pwd`/special.sock
check as ovn-nb ovs-appctl -t ovsdb-server ovsdb-server/add-remote "$conn2"

# ovn-northd won't respond to changes (because the nbdb connection dropped).
check ovn-nbctl --db="${conn2#p}" ls-add sw1
sleep 5
check_row_count Datapath_Binding 1
check_row_count Logical_Flow $lf

# Now re-enable the nbdb connection and observe ovn-northd catch up.
#
# It's important to check both Datapath_Binding and Logical_Flow because
# ovn-northd-ddlog implements them in different ways that might go wrong
# differently on reconnection.
check as ovn-nb ovs-appctl -t ovsdb-server ovsdb-server/add-remote "$conn"
wait_row_count Datapath_Binding 2
wait_row_count Logical_Flow $(expr 2 \* $lf)

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- southbound database reconnection])
ovn_start --no-backup-northd

# Check that ovn-northd is active, by verifying that it creates and
# destroys southbound datapaths as one would expect.
check_row_count Datapath_Binding 0
check ovn-nbctl --wait=sb ls-add sw0
check_row_count Datapath_Binding 1
lf=$(count_rows Logical_Flow)

# Make sbdb ovsdb-server drop connection from ovn-northd.
conn=$(as ovn-sb ovs-appctl -t ovsdb-server ovsdb-server/list-remotes)
check as ovn-sb ovs-appctl -t ovsdb-server ovsdb-server/remove-remote "$conn"
conn2=punix:`pwd`/special.sock
check as ovn-sb ovs-appctl -t ovsdb-server ovsdb-server/add-remote "$conn2"

# ovn-northd can't respond to changes (because the sbdb connection dropped).
check ovn-nbctl ls-add sw1
sleep 5
OVN_SB_DB=${conn2#p} check_row_count Datapath_Binding 1
OVN_SB_DB=${conn2#p} check_row_count Logical_Flow $lf

# Now re-enable the sbdb connection and observe ovn-northd catch up.
#
# It's important to check both Datapath_Binding and Logical_Flow because
# ovn-northd-ddlog implements them in different ways that might go wrong
# differently on reconnection.
check as ovn-sb ovs-appctl -t ovsdb-server ovsdb-server/add-remote "$conn"
wait_row_count Datapath_Binding 2
wait_row_count Logical_Flow $(expr 2 \* $lf)

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check Redirect Chassis propagation from NB to SB])
ovn_start

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl lr-add R1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 router
ovn-nbctl lsp-set-options S1-R1 router-port=R1-S1

ovn-nbctl --wait=sb lrp-set-gateway-chassis R1-S1 gw1

uuid=`ovn-sbctl --columns=_uuid --bare find Port_Binding logical_port=cr-R1-S1`
echo "CR-LRP UUID is: " $uuid

ovn-nbctl lrp-set-redirect-type R1-S1 bridged
OVS_WAIT_UNTIL([ovn-sbctl get Port_Binding ${uuid} options:redirect-type], [0], [bridged
])

ovn-nbctl lrp-set-redirect-type R1-S1 overlay
OVS_WAIT_UNTIL([ovn-sbctl get Port_Binding ${uuid} options:redirect-type], [0], [overlay
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check stateless dnat_and_snat rule])
ovn_start

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl lr-add R1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 router
ovn-nbctl lsp-set-options S1-R1 router-port=R1-S1

ovn-nbctl --wait=sb lrp-set-gateway-chassis R1-S1 gw1

uuid=`ovn-sbctl --columns=_uuid --bare find Port_Binding logical_port=cr-R1-S1`
echo "CR-LRP UUID is: " $uuid

check_flow_matches() {
    local regex=$1 count=$2
    local found=$(grep -c "$1" r1-flows)
    echo "checking for $count flows matching $regex... found $found"
    AT_FAIL_IF([test $found != $count])
}

check_flow_match_sets() {
    ovn-sbctl dump-flows R1 > r1-flows
    AT_CAPTURE_FILE([r1-flows])

    for regex in lr_in_unsnat ct_snat ct_dnat ip4.dst= ip4.src= ip6.dst= ip6.src=; do
        check_flow_matches $regex $1
        shift
    done
}

echo
echo "IPv4: stateful"
ovn-nbctl --wait=sb lr-nat-add R1 dnat_and_snat  172.16.1.1 50.0.0.11
check_flow_match_sets 2 2 2 0 0 0 0
ovn-nbctl lr-nat-del R1 dnat_and_snat  172.16.1.1

echo
echo "IPv4: stateless"
ovn-nbctl --wait=sb --stateless lr-nat-add R1 dnat_and_snat  172.16.1.1 50.0.0.11
check_flow_match_sets 2 0 0 2 2 0 0
ovn-nbctl lr-nat-del R1 dnat_and_snat  172.16.1.1

echo
echo "IPv6: stateful"
ovn-nbctl --wait=sb lr-nat-add R1 dnat_and_snat fd01::1 fd11::2
check_flow_match_sets 2 2 2 0 0 0 0
ovn-nbctl lr-nat-del R1 dnat_and_snat  fd01::1

echo
echo "IPv6: stateless"
ovn-nbctl --wait=sb --stateless lr-nat-add R1 dnat_and_snat fd01::1 fd11::2
check_flow_match_sets 2 0 0 0 0 2 2

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check portrange dnat, snat and dnat_and_snat rules])
ovn_start

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl lr-add R1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 router
ovn-nbctl lsp-set-options S1-R1 router-port=R1-S1

ovn-nbctl --wait=sb lrp-set-gateway-chassis R1-S1 gw1

uuid=`ovn-sbctl --columns=_uuid --bare find Port_Binding logical_port=cr-R1-S1`
echo "CR-LRP UUID is: " $uuid

# IPV4
ovn-nbctl --portrange lr-nat-add R1 dnat_and_snat  172.16.1.1 50.0.0.11 1-3000

AT_CAPTURE_FILE([sbflows])
OVS_WAIT_UNTIL([ovn-sbctl dump-flows R1 > sbflows && test 2 = `grep -c lr_in_unsnat sbflows`])
AT_CHECK([grep -c 'ct_snat.*3000' sbflows && grep -c 'ct_dnat.*3000' sbflows],
  [0], [1
1
])

ovn-nbctl lr-nat-del R1 dnat_and_snat  172.16.1.1
ovn-nbctl --wait=sb --portrange lr-nat-add R1 snat  172.16.1.1 50.0.0.11 1-3000

AT_CAPTURE_FILE([sbflows2])
OVS_WAIT_UNTIL([ovn-sbctl dump-flows R1 > sbflows2 && test 2 = `grep -c lr_in_unsnat sbflows`])
AT_CHECK([grep -c 'ct_snat.*3000' sbflows2 && grep -c 'ct_dnat.*3000' sbflows2],
  [1], [1
0
])

ovn-nbctl lr-nat-del R1 snat  172.16.1.1
ovn-nbctl --wait=sb --portrange --stateless lr-nat-add R1 dnat_and_snat  172.16.1.2 50.0.0.12 1-3000

AT_CAPTURE_FILE([sbflows3])
OVS_WAIT_UNTIL([ovn-sbctl dump-flows R1 > sbflows3 && test 3 = `grep -c lr_in_unsnat sbflows3`])
AT_CHECK([grep 'ct_[s]dnat.*172\.16\.1\.2.*3000' sbflows3], [1])

ovn-nbctl lr-nat-del R1 dnat_and_snat  172.16.1.1

AT_CLEANUP
])

AT_SETUP([ovn -- check allowed/disallowed external dnat, snat and dnat_and_snat rules])
ovn_start

# Logical network:
# 2 LRs - CR and DR
# CR ==> Centralized router
# DR ==> Distributed router
#
# DR is connected to S1 and CR is connected to S2

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl lr-add DR
ovn-nbctl lrp-add DR DR-S1 02:ac:10:01:00:01 172.16.1.1/24

cr_uuid=$(ovn-nbctl create Logical_Router name=CR)
ovn-nbctl lrp-add CR CR-S2 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-DR
ovn-nbctl lsp-set-type S1-DR router
ovn-nbctl lsp-set-addresses S1-DR router
ovn-nbctl --wait=sb lsp-set-options S1-DR router-port=DR-S1

ovn-nbctl ls-add S2
ovn-nbctl lsp-add S2 S2-CR
ovn-nbctl lsp-set-type S2-CR router
ovn-nbctl lsp-set-addresses S2-CR router
ovn-nbctl --wait=sb lsp-set-options S2-CR router-port=CR-S2

ovn-nbctl lrp-set-gateway-chassis DR-S1 gw1

uuid=`ovn-sbctl --columns=_uuid --bare find Port_Binding logical_port=cr-DR-S1`
echo "CR-LRP UUID is: " $uuid

ovn-nbctl set Logical_Router $cr_uuid options:chassis=gw1
ovn-nbctl --wait=hv sync

ovn-nbctl create Address_Set name=allowed_range addresses=\"1.1.1.1\"
ovn-nbctl create Address_Set name=disallowed_range addresses=\"2.2.2.2\"

# SNAT with ALLOWED_IPs
ovn-nbctl lr-nat-add DR snat  172.16.1.1 50.0.0.11
ovn-nbctl lr-nat-update-ext-ip DR snat 50.0.0.11 allowed_range

ovn-nbctl lr-nat-add CR snat  172.16.1.1 50.0.0.11
ovn-nbctl lr-nat-update-ext-ip CR snat 50.0.0.11 allowed_range

OVS_WAIT_UNTIL([test 3 = `ovn-sbctl dump-flows DR | grep lr_out_snat | wc -l`])
OVS_WAIT_UNTIL([test 3 = `ovn-sbctl dump-flows CR | grep lr_out_snat | wc -l`])

AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $allowed_range" | wc -l], [0], [1
])

# SNAT with DISALLOWED_IPs
ovn-nbctl lr-nat-del DR snat  50.0.0.11
ovn-nbctl lr-nat-del CR snat  50.0.0.11

ovn-nbctl lr-nat-add DR snat  172.16.1.1 50.0.0.11
ovn-nbctl lr-nat-add CR snat  172.16.1.1 50.0.0.11

ovn-nbctl --is-exempted lr-nat-update-ext-ip DR snat 50.0.0.11 disallowed_range
ovn-nbctl --is-exempted lr-nat-update-ext-ip CR snat 50.0.0.11 disallowed_range

ovn-sbctl dump-flows DR
ovn-sbctl dump-flows CR

OVS_WAIT_UNTIL([test 4 = `ovn-sbctl dump-flows DR | grep lr_out_snat | \
wc -l`])
OVS_WAIT_UNTIL([test 4 = `ovn-sbctl dump-flows CR | grep lr_out_snat | \
wc -l`])

ovn-nbctl show DR
ovn-sbctl dump-flows DR

ovn-nbctl show CR
ovn-sbctl dump-flows CR

AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep "priority=162" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "priority=161" | wc -l], [0], [1
])

AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep "priority=34" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "priority=33" | wc -l], [0], [1
])

# Stateful FIP with ALLOWED_IPs
ovn-nbctl lr-nat-del DR snat  50.0.0.11
ovn-nbctl lr-nat-del CR snat  50.0.0.11

ovn-nbctl lr-nat-add DR dnat_and_snat  172.16.1.2 50.0.0.11
ovn-nbctl lr-nat-add CR dnat_and_snat  172.16.1.2 50.0.0.11

ovn-nbctl lr-nat-update-ext-ip DR dnat_and_snat 172.16.1.2 allowed_range
ovn-nbctl lr-nat-update-ext-ip CR dnat_and_snat 172.16.1.2 allowed_range

ovn-nbctl show DR
ovn-sbctl dump-flows DR
ovn-nbctl show CR
ovn-sbctl dump-flows CR

OVS_WAIT_UNTIL([test 3 = `ovn-sbctl dump-flows DR | grep lr_out_snat | \
wc -l`])
OVS_WAIT_UNTIL([test 3 = `ovn-sbctl dump-flows CR | grep lr_out_snat | \
wc -l`])

AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows DR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $allowed_range" | wc -l], [0], [1
])

# Stateful FIP with DISALLOWED_IPs
ovn-nbctl lr-nat-del DR dnat_and_snat  172.16.1.2
ovn-nbctl lr-nat-del CR dnat_and_snat  172.16.1.2

ovn-nbctl lr-nat-add DR dnat_and_snat  172.16.1.2 50.0.0.11
ovn-nbctl lr-nat-add CR dnat_and_snat  172.16.1.2 50.0.0.11

ovn-nbctl --is-exempted lr-nat-update-ext-ip DR dnat_and_snat 172.16.1.2 disallowed_range
ovn-nbctl --is-exempted lr-nat-update-ext-ip CR dnat_and_snat 172.16.1.2 disallowed_range

ovn-nbctl show DR
ovn-sbctl dump-flows DR
ovn-nbctl show CR
ovn-sbctl dump-flows CR

OVS_WAIT_UNTIL([test 4 = `ovn-sbctl dump-flows DR | grep lr_out_snat | \
wc -l`])
OVS_WAIT_UNTIL([test 4 = `ovn-sbctl dump-flows CR | grep lr_out_snat | \
wc -l`])

AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep "priority=162" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows DR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $disallowed_range" | grep "priority=101" | wc -l], [0], [1
])

AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep "priority=34" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $disallowed_range" | grep "priority=101" | wc -l], [0], [1
])

# Stateless FIP with DISALLOWED_IPs
ovn-nbctl lr-nat-del DR dnat_and_snat  172.16.1.2
ovn-nbctl lr-nat-del CR dnat_and_snat  172.16.1.2

ovn-nbctl --stateless lr-nat-add DR dnat_and_snat  172.16.1.2 50.0.0.11
ovn-nbctl --stateless lr-nat-add CR dnat_and_snat  172.16.1.2 50.0.0.11

ovn-nbctl lr-nat-update-ext-ip DR dnat_and_snat 172.16.1.2 allowed_range
ovn-nbctl lr-nat-update-ext-ip CR dnat_and_snat 172.16.1.2 allowed_range

ovn-nbctl show DR
ovn-sbctl dump-flows DR

ovn-nbctl show CR
ovn-sbctl dump-flows CR

OVS_WAIT_UNTIL([test 3 = `ovn-sbctl dump-flows DR | grep lr_out_snat | \
wc -l`])
OVS_WAIT_UNTIL([test 3 = `ovn-sbctl dump-flows CR | grep lr_out_snat | \
wc -l`])

AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows DR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $allowed_range" | wc -l], [0], [1
])

# Stateful FIP with DISALLOWED_IPs
ovn-nbctl lr-nat-del DR dnat_and_snat  172.16.1.2
ovn-nbctl lr-nat-del CR dnat_and_snat  172.16.1.2

ovn-nbctl --stateless lr-nat-add DR dnat_and_snat  172.16.1.2 50.0.0.11
ovn-nbctl --stateless lr-nat-add CR dnat_and_snat  172.16.1.2 50.0.0.11

ovn-nbctl --is-exempted lr-nat-update-ext-ip DR dnat_and_snat 172.16.1.2 disallowed_range
ovn-nbctl --is-exempted lr-nat-update-ext-ip CR dnat_and_snat 172.16.1.2 disallowed_range

ovn-nbctl show DR
ovn-sbctl dump-flows DR
ovn-nbctl show CR
ovn-sbctl dump-flows CR

OVS_WAIT_UNTIL([test 4 = `ovn-sbctl dump-flows DR | grep lr_out_snat | \
wc -l`])
OVS_WAIT_UNTIL([test 4 = `ovn-sbctl dump-flows CR | grep lr_out_snat | \
wc -l`])

AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep "priority=162" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows DR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $disallowed_range" | grep "priority=101" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep "priority=34" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $disallowed_range" | grep "priority=101" | wc -l], [0], [1
])
AT_CLEANUP

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check Load balancer health check and Service Monitor sync])

ovn_start NORTHD_TYPE

check ovn-nbctl lb-add lb1 10.0.0.10:80 10.0.0.3:80,20.0.0.3:80
check ovn-nbctl set load_balancer . ip_port_mappings:10.0.0.3=sw0-p1
check ovn-nbctl --wait=sb set load_balancer . ip_port_mappings:20.0.0.3=sw1-p1

check ovn-sbctl list service_monitor

AT_CHECK([ovn-nbctl --wait=sb \
            -- --id=@hc create Load_Balancer_Health_Check vip="10.0.0.10\:80" \
            -- add Load_Balancer . health_check @hc | uuidfilt], [0], [<0>
])
wait_row_count Service_Monitor 0

# create logical switches and ports
check ovn-nbctl ls-add sw0
check ovn-nbctl --wait=sb \
  -- lsp-add sw0 sw0-p1 \
  -- lsp-set-addresses sw0-p1 "00:00:00:00:00:03 10.0.0.3"
wait_row_count Service_Monitor 0

check ovn-nbctl ls-add sw1
check ovn-nbctl --wait=sb \
  -- lsp-add sw1 sw1-p1 \
  -- lsp-set-addresses sw1-p1 "02:00:00:00:00:03 20.0.0.3"
wait_row_count Service_Monitor 0

check ovn-nbctl --wait=sb set load_balancer . ip_port_mappings:10.0.0.3=sw0-p1:10.0.0.2
wait_row_count Service_Monitor 1

check ovn-nbctl --wait=sb set load_balancer . ip_port_mappings:20.0.0.3=sw1-p1:20.0.0.2
wait_row_count Service_Monitor 2

check ovn-nbctl --wait=sb ls-lb-add sw0 lb1

AT_CAPTURE_FILE([sbflows])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows | grep 'priority=120.*ct_lb'], 0, [dnl
  table=11(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
])

# Delete the Load_Balancer_Health_Check
check ovn-nbctl --wait=sb clear load_balancer . health_check
wait_row_count Service_Monitor 0

AT_CAPTURE_FILE([sbflows2])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows2 | grep 'priority=120.*ct_lb'], [0],
[  table=11(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
])

# Create the Load_Balancer_Health_Check again.
AT_CHECK([ovn-nbctl --wait=sb \
          -- --id=@hc create Load_Balancer_Health_Check vip="10.0.0.10\:80" \
          -- add Load_Balancer . health_check @hc | uuidfilt], [0], [<0>
])
wait_row_count Service_Monitor 2

AT_CAPTURE_FILE([sbflows3])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows 3 | grep 'priority=120.*ct_lb'], [0],
[  table=10(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
])

# Set the service monitor for sw1-p1 to offline
check ovn-sbctl set service_monitor sw1-p1 status=offline
check ovn-nbctl --wait=hv sync

wait_row_count Service_Monitor 1 logical_port=sw1-p1 status=offline

AT_CAPTURE_FILE([sbflows4])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows4 | grep 'priority=120.*ct_lb'], [0],
[  table=11(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(ct_lb(backends=10.0.0.3:80);)
])

# Set the service monitor for sw0-p1 to offline
check ovn-sbctl set service_monitor sw0-p1 status=offline
wait_row_count Service_Monitor 1 logical_port=sw0-p1 status=offline

AT_CAPTURE_FILE([sbflows5])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows5 | grep 'priority=120.*ct_lb'], 1)

AT_CAPTURE_FILE([sbflows6])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows6 | grep "ip4.dst == 10.0.0.10 && tcp.dst == 80" | grep priority=120], [0], [dnl
  table=11(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(drop;)
])

# Set the service monitor for sw0-p1 and sw1-p1 to online
check ovn-sbctl set service_monitor sw0-p1 status=online
check ovn-sbctl set service_monitor sw1-p1 status=online
wait_row_count Service_Monitor 1 logical_port=sw1-p1 status=online

AT_CAPTURE_FILE([sbflows7])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows7 | grep ct_lb | grep priority=120], 0,
[  table=11(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
])

# Set the service monitor for sw1-p1 to error
check ovn-sbctl set service_monitor sw1-p1 status=error
wait_row_count Service_Monitor 1 logical_port=sw1-p1 status=error

AT_CAPTURE_FILE([sbflows8])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows8 | grep "ip4.dst == 10.0.0.10 && tcp.dst == 80" | grep priority=120], [0], [dnl
  table=11(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(ct_lb(backends=10.0.0.3:80);)
])

# Add one more vip to lb1
check ovn-nbctl set load_balancer . vip:10.0.0.40\\:1000=10.0.0.3:1000,20.0.0.3:80

# create health_check for new vip - 10.0.0.40
AT_CHECK(
  [ovn-nbctl --wait=sb \
          -- --id=@hc create Load_Balancer_Health_Check vip=10.0.0.40\\:1000 \
          -- add Load_Balancer . health_check @hc | uuidfilt], [0], [<0>
])

# There should be totally 3 rows in service_monitor for -
#    * 10.0.0.3:80
#    * 10.0.0.3:1000
#    * 20.0.0.3:80
wait_row_count Service_Monitor 3

# There should be 2 rows with logical_port=sw0-p1
check_row_count Service_Monitor 2 logical_port=sw0-p1

# There should be  row1 with port=1000
check_row_count Service_Monitor 1 port=1000

AT_CAPTURE_FILE([sbflows9])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows9 | grep ct_lb | grep priority=120],
  0,
[  table=10(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(ct_lb(backends=10.0.0.3:80);)
  table=10(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.40 && tcp.dst == 1000), action=(ct_lb(backends=10.0.0.3:1000);)
])

# Set the service monitor for sw1-p1 to online
check ovn-sbctl set service_monitor sw1-p1 status=online

wait_row_count Service_Monitor 1 logical_port=sw1-p1 status=online

AT_CAPTURE_FILE([sbflows10])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows10 | grep ct_lb | grep priority=120],
  0,
[  table=11(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
  table=11(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.40 && tcp.dst == 1000), action=(ct_lb(backends=10.0.0.3:1000,20.0.0.3:80);)
])

# Associate lb1 to sw1
check ovn-nbctl --wait=sb ls-lb-add sw1 lb1
AT_CAPTURE_FILE([sbflows11])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw1 | tee sbflows11 | grep ct_lb | grep priority=120],
  0, [dnl
  table=11(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
  table=11(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.40 && tcp.dst == 1000), action=(ct_lb(backends=10.0.0.3:1000,20.0.0.3:80);)
])

# Now create lb2 same as lb1 but udp protocol.
check ovn-nbctl lb-add lb2 10.0.0.10:80 10.0.0.3:80,20.0.0.3:80 udp
check ovn-nbctl --wait=sb set load_balancer lb2 ip_port_mappings:10.0.0.3=sw0-p1:10.0.0.2
check ovn-nbctl --wait=sb set load_balancer lb2 ip_port_mappings:20.0.0.3=sw1-p1:20.0.0.2

AT_CHECK([ovn-nbctl -- --id=@hc create Load_Balancer_Health_Check vip="10.0.0.10\:80" -- add Load_Balancer lb2 health_check @hc | uuidfilt],
         [0], [<0>
])

check ovn-nbctl ls-lb-add sw0 lb2
check ovn-nbctl ls-lb-add sw1 lb2

wait_row_count Service_Monitor 5

# Change the svc_monitor_mac. This should get reflected in service_monitor table rows.
check ovn-nbctl set NB_Global . options:svc_monitor_mac="fe:a0:65:a2:01:03"

wait_row_count Service_Monitor 5 src_mac='"fe:a0:65:a2:01:03"'

# Change the source ip for 10.0.0.3 backend ip in lb2
check ovn-nbctl --wait=sb set load_balancer lb2 ip_port_mappings:10.0.0.3=sw0-p1:10.0.0.100

wait_row_count Service_Monitor 1 logical_port=sw0-p1 src_ip=10.0.0.100

ovn-nbctl --wait=sb lb-del lb1
wait_row_count Service_Monitor 2

ovn-nbctl --wait=sb lb-del lb2
wait_row_count Service_Monitor 0

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- Load balancer VIP in NAT entries])
AT_SKIP_IF([test $HAVE_PYTHON = no])
ovn_start

ovn-nbctl lr-add lr0
ovn-nbctl lrp-add lr0 lr0-public 00:00:01:01:02:04 192.168.2.1/24
ovn-nbctl lrp-add lr0 lr0-join 00:00:01:01:02:04 10.10.0.1/24

ovn-nbctl set logical_router lr0 options:chassis=ch1

ovn-nbctl lb-add lb1 "192.168.2.1:8080" "10.0.0.4:8080"
ovn-nbctl lb-add lb2 "192.168.2.4:8080" "10.0.0.5:8080" udp
ovn-nbctl lb-add lb3 "192.168.2.5:8080" "10.0.0.6:8080"
ovn-nbctl lb-add lb4 "192.168.2.6:8080" "10.0.0.7:8080"

ovn-nbctl lr-lb-add lr0 lb1
ovn-nbctl lr-lb-add lr0 lb2
ovn-nbctl lr-lb-add lr0 lb3
ovn-nbctl lr-lb-add lr0 lb4

ovn-nbctl lr-nat-add lr0 snat 192.168.2.1 10.0.0.0/24
ovn-nbctl lr-nat-add lr0 dnat_and_snat 192.168.2.4 10.0.0.4
ovn-nbctl --wait=sb lr-nat-add lr0 dnat 192.168.2.5 10.0.0.5

ovn-sbctl dump-flows lr0 > sbflows
AT_CAPTURE_FILE([sbflows])

OVS_WAIT_UNTIL([test 1 = $(grep lr_in_unsnat sbflows | \
grep "ip4 && ip4.dst == 192.168.2.1 && tcp && tcp.dst == 8080" -c) ])

AT_CHECK([test 1 = $(grep lr_in_unsnat sbflows | \
grep "ip4 && ip4.dst == 192.168.2.4 && udp && udp.dst == 8080" -c) ])

AT_CHECK([test 1 = $(grep lr_in_unsnat sbflows | \
grep "ip4 && ip4.dst == 192.168.2.5 && tcp && tcp.dst == 8080" -c) ])

AT_CHECK([test 0 = $(grep lr_in_unsnat sbflows | \
grep "ip4 && ip4.dst == 192.168.2.6 && tcp && tcp.dst == 8080" -c) ])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- DNAT force snat IP])
ovn_start

ovn-nbctl lr-add lr0
ovn-nbctl lrp-add lr0 lr0-public 00:00:01:01:02:04 192.168.2.1/24
ovn-nbctl lrp-add lr0 lr0-join 00:00:01:01:02:04 10.10.0.1/24

ovn-nbctl set logical_router lr0 options:chassis=ch1
ovn-nbctl lr-nat-add lr0 dnat 192.168.2.2 10.0.0.5
ovn-nbctl set logical_router lr0 options:dnat_force_snat_ip=192.168.2.3
ovn-nbctl --wait=sb sync

AT_CHECK([ovn-sbctl lflow-list lr0 | grep lr_in_unsnat], [0], [dnl
  table=5 (lr_in_unsnat       ), priority=110  , match=(ip4 && ip4.dst == 192.168.2.3), action=(ct_snat;)
  table=5 (lr_in_unsnat       ), priority=0    , match=(1), action=(next;)
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check reconcile stale Datapath_Binding])
ovn_start

check ovn-nbctl lr-add lr
check ovn-nbctl lrp-add lr p 00:00:00:00:00:01 1.1.1.1/24
check ovn-nbctl --wait=sb sync

# Create a MAC_Binding referring the router datapath.
AT_CHECK([ovn-sbctl --id=@dp get datapath . -- create mac_binding logical_port=p ip=1.1.1.2 datapath=@dp | uuidfilt], [0], [<0>
])

check ovn-nbctl --wait=sb \
             -- lrp-del p \
             -- lr-del lr \
             -- lr-add lr \
             -- lrp-add lr p 00:00:00:00:00:01 1.1.1.1/24

check_row_count Datapath_Binding 1

nb_uuid=$(ovn-sbctl get Datapath_Binding . external_ids:logical-router)
lr_uuid=\"$(ovn-nbctl get Logical_Router . _uuid)\"
echo nb_uuid="$nb_uuid" lr_uuid="$lr_uuid"
AT_CHECK([test "${nb_uuid}" = "${lr_uuid}"])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check reconcile stale tunnel keys])
ovn_start

ovn-nbctl ls-add ls1
ovn-nbctl ls-add ls2
ovn-nbctl lsp-add ls1 lsp1
ovn-nbctl lsp-add ls2 lsp2
AT_CHECK([ovn-nbctl --wait=sb sync], [0])

# Ports are bound on different datapaths so it's expected that they both
# get tunnel_key == 1.
AT_CHECK([test 1 = $(ovn-sbctl --bare --columns tunnel_key find \
port_binding logical_port=lsp1)])
AT_CHECK([test 1 = $(ovn-sbctl --bare --columns tunnel_key find \
port_binding logical_port=lsp2)])

ovn-nbctl lsp-del lsp2 -- lsp-add ls1 lsp2
AT_CHECK([ovn-nbctl --wait=sb sync], [0])

AT_CHECK([test 1 = $(ovn-sbctl --bare --columns tunnel_key find \
port_binding logical_port=lsp1)])
AT_CHECK([test 2 = $(ovn-sbctl --bare --columns tunnel_key find \
port_binding logical_port=lsp2)])

# ovn-northd should allocate a new tunnel_key for lsp1 or lsp2 to maintain
# unique DB indices.
AT_CHECK([test ${pb1_key} != ${pb2_key}])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check reconcile stale Ha_Chassis_Group])
ovn_start

ovn-nbctl ls-add ls1
ovn-nbctl ls-add ls2
ovn-nbctl lsp-add ls1 lsp1
ovn-nbctl lsp-add ls2 lsp2

ovn-nbctl lsp-set-type lsp2 external

ovn-nbctl ha-chassis-group-add chg1
ovn-nbctl ha-chassis-group-add-chassis chg1 chassis-1 30

chg1_uuid=$(ovn-nbctl --bare --columns _uuid list Ha_Chassis_Group .)
ovn-nbctl set logical_switch_port lsp2 ha_chassis_group=${chg1_uuid}
AT_CHECK([ovn-nbctl --wait=sb sync], [0])

# Move lsp2 from ls2 to ls1. This should also remove the SB HA_Chassis_Group
# record.
ovn-nbctl lsp-del lsp2 -- lsp-add ls1 lsp2
AT_CHECK([ovn-nbctl --wait=sb sync], [0])

AT_CHECK([test 0 = $(ovn-sbctl list Ha_Chassis_Group | wc -l)])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check NB/SB Port_Group translation (lsp add/del)])
ovn_start

ovn-nbctl ls-add ls1
ovn-nbctl ls-add ls2
ovn-nbctl lsp-add ls1 lsp1
ovn-nbctl lsp-add ls2 lsp2
ovn-nbctl --wait=sb sync
ls1_key=$(ovn-sbctl --columns tunnel_key --bare list Datapath_Binding ls1)
ls2_key=$(ovn-sbctl --columns tunnel_key --bare list Datapath_Binding ls2)

# Add an empty port group. This should generate no entry in the SB.
ovn-nbctl --wait=sb pg-add pg_test
AT_CHECK([test 0 = $(ovn-sbctl --columns _uuid list Port_Group | grep uuid -c)])

# Add lsp1 to the port group. This should generate an entry in the SB only
# for ls1.
ovn-nbctl --wait=sb pg-set-ports pg_test lsp1
AT_CHECK([test 1 = $(ovn-sbctl --columns _uuid list Port_Group | grep uuid -c)])
AT_CHECK([ovn-sbctl --columns ports --bare find Port_Group name=${ls1_key}_pg_test], [0], [dnl
lsp1
])

# Add lsp2 to the port group. This should generate a new entry in the SB, for
# ls2.
ovn-nbctl --wait=sb pg-set-ports pg_test lsp1 lsp2
AT_CHECK([test 2 = $(ovn-sbctl --columns _uuid list Port_Group | grep uuid -c)])
AT_CHECK([ovn-sbctl --columns ports --bare find Port_Group name=${ls1_key}_pg_test], [0], [dnl
lsp1
])
AT_CHECK([ovn-sbctl --columns ports --bare find Port_Group name=${ls2_key}_pg_test], [0], [dnl
lsp2
])

# Remove lsp1 from the port group. The SB Port_Group for ls1 should be
# removed.
ovn-nbctl --wait=sb pg-set-ports pg_test lsp2
AT_CHECK([test 1 = $(ovn-sbctl --columns _uuid list Port_Group | grep uuid -c)])
AT_CHECK([ovn-sbctl --columns ports --bare find Port_Group name=${ls2_key}_pg_test], [0], [dnl
lsp2
])

# Remove lsp2 from the port group. All SB Port_Groups should be purged.
ovn-nbctl --wait=sb clear Port_Group pg_test ports
AT_CHECK([test 0 = $(ovn-sbctl --columns _uuid list Port_Group | grep uuid -c)])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check NB/SB Port_Group translation (ls del)])
ovn_start

ovn-nbctl ls-add ls1
ovn-nbctl ls-add ls2
ovn-nbctl lsp-add ls1 lsp1
ovn-nbctl lsp-add ls2 lsp2
ovn-nbctl --wait=sb sync
ls1_key=$(ovn-sbctl --columns tunnel_key --bare list Datapath_Binding ls1)
ls2_key=$(ovn-sbctl --columns tunnel_key --bare list Datapath_Binding ls2)

# Add lsp1 & lsp2 to a port group. This should generate two entries in the
# SB (one per logical switch).
ovn-nbctl --wait=sb pg-add pg_test lsp1 lsp2
wait_row_count Port_Group 2
check_row_count Port_Group 1 name=${ls1_key}_pg_test
check_row_count Port_Group 1 name=${ls2_key}_pg_test

# Delete logical switch ls1. This should remove the associated SB Port_Group.
ovn-nbctl --wait=sb ls-del ls1
wait_row_count Port_Group 1
check_row_count Port_Group 1 name=${ls2_key}_pg_test

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check router ARP/NS responder])
ovn_start

ovn-sbctl chassis-add ch geneve 127.0.0.1

ovn-nbctl lr-add lr
ovn-nbctl lrp-add lr lrp-public 00:00:00:00:01:00 43.43.43.1/24
ovn-nbctl lrp-add lr lrp 00:00:00:00:00:01 42.42.42.1/24

ovn-nbctl ls-add ls
ovn-nbctl lsp-add ls ls-rp
ovn-nbctl lsp-set-type ls-rp router
ovn-nbctl lsp-set-addresses ls-rp router
ovn-nbctl lsp-set-options ls-rp router-port=lrp
ovn-nbctl lsp-add ls ls-vm

ovn-nbctl set logical_router lr options:chassis=ch
ovn-nbctl lr-nat-add lr dnat_and_snat 43.43.43.2 42.42.42.2
ovn-nbctl lr-nat-add lr dnat 43.43.43.3 42.42.42.3
ovn-nbctl lr-nat-add lr dnat_and_snat 43.43.43.4 42.42.42.4 ls-vm 00:00:00:00:00:02
ovn-nbctl lr-nat-add lr snat 43.43.43.150 43.43.43.50
ovn-nbctl lr-nat-add lr snat 43.43.43.150 43.43.43.51

ovn-nbctl --wait=sb sync

# Ingress router port ETH address is stored in lr_in_admission.
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_admission.*xreg0\[[0..47\]]" | sort], [0], [dnl
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.dst == 00:00:00:00:00:01 && inport == "lrp"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:00:01; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.dst == 00:00:00:00:01:00 && inport == "lrp-public"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:01:00; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.mcast && inport == "lrp"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:00:01; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.mcast && inport == "lrp-public"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:01:00; next;)
])

# Ingress router port ETH address is used for ARP reply/NA in lr_in_ip_input.
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_ip_input.*priority=90" | grep "arp\|nd" | sort], [0], [dnl
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.150), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.150; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.2), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.2; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.3), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.3; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.4), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.4; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && arp.op == 1 && arp.tpa == 42.42.42.1 && arp.spa == 42.42.42.0/24), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 42.42.42.1; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && ip6.dst == {fe80::200:ff:fe00:1, ff02::1:ff00:1} && nd_ns && nd.target == fe80::200:ff:fe00:1), dnl
action=(nd_na_router { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:1; nd.target = fe80::200:ff:fe00:1; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.1 && arp.spa == 43.43.43.0/24), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.1; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && ip6.dst == {fe80::200:ff:fe00:100, ff02::1:ff00:100} && nd_ns && nd.target == fe80::200:ff:fe00:100), dnl
action=(nd_na_router { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:100; nd.target = fe80::200:ff:fe00:100; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
])

# xreg0[0..47] isn't used anywhere else.
AT_CHECK([ovn-sbctl lflow-list | grep "xreg0\[[0..47\]]" | grep -vE 'lr_in_admission|lr_in_ip_input'], [1], [])

# Test chassis redirect port.
ovn-nbctl remove logical_router lr options chassis
ovn-nbctl lrp-set-gateway-chassis lrp-public ch
ovn-nbctl --wait=sb sync

# Ingress router port ETH address is stored in lr_in_admission.
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_admission.*xreg0\[[0..47\]]" | sort], [0], [dnl
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.dst == 00:00:00:00:00:01 && inport == "lrp"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:00:01; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.dst == 00:00:00:00:00:02 && inport == "lrp-public" && is_chassis_resident("ls-vm")), dnl
action=(xreg0[[0..47]] = 00:00:00:00:01:00; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.dst == 00:00:00:00:01:00 && inport == "lrp-public" && is_chassis_resident("cr-lrp-public")), dnl
action=(xreg0[[0..47]] = 00:00:00:00:01:00; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.mcast && inport == "lrp"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:00:01; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.mcast && inport == "lrp-public"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:01:00; next;)
])

# Ingress router port is used for ARP reply/NA in lr_in_ip_input.
# xxreg0[0..47] is used unless external_mac is set.
# Priority 90 flows (per router).
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_ip_input.*priority=90" | grep "arp\|nd" | sort], [0], [dnl
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.150), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.150; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.2), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.2; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.3), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.3; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.4), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.4; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && arp.op == 1 && arp.tpa == 42.42.42.1 && arp.spa == 42.42.42.0/24), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 42.42.42.1; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && ip6.dst == {fe80::200:ff:fe00:1, ff02::1:ff00:1} && nd_ns && nd.target == fe80::200:ff:fe00:1), dnl
action=(nd_na_router { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:1; nd.target = fe80::200:ff:fe00:1; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.1 && arp.spa == 43.43.43.0/24), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.1; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && ip6.dst == {fe80::200:ff:fe00:100, ff02::1:ff00:100} && nd_ns && nd.target == fe80::200:ff:fe00:100 && is_chassis_resident("cr-lrp-public")), dnl
action=(nd_na_router { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:100; nd.target = fe80::200:ff:fe00:100; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
])

# Priority 91 drop flows (per distributed gw port), if port is not resident.
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_ip_input.*priority=91" | grep "arp\|nd" | sort], [0], [dnl
  table=3 (lr_in_ip_input     ), priority=91   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.150), action=(drop;)
  table=3 (lr_in_ip_input     ), priority=91   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.2), dnl
action=(drop;)
  table=3 (lr_in_ip_input     ), priority=91   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.3), dnl
action=(drop;)
  table=3 (lr_in_ip_input     ), priority=91   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.4), dnl
action=(drop;)
])

# Priority 92 ARP/NS responders (per distributed gw port), if port is resident.
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_ip_input.*priority=92" | grep "arp\|nd" | sort], [0], [dnl
  table=3 (lr_in_ip_input     ), priority=92   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.150 && is_chassis_resident("cr-lrp-public")), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.150; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=92   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.2 && is_chassis_resident("cr-lrp-public")), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.2; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=92   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.3 && is_chassis_resident("cr-lrp-public")), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa = arp.spa; arp.spa = 43.43.43.3; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=92   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.4 && is_chassis_resident("ls-vm")), dnl
action=(eth.dst = eth.src; eth.src = 00:00:00:00:00:02; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = 00:00:00:00:00:02; arp.tpa = arp.spa; arp.spa = 43.43.43.4; outport = inport; flags.loopback = 1; output;)
])

# xreg0[0..47] isn't used anywhere else.
AT_CHECK([ovn-sbctl lflow-list | grep "xreg0\[[0..47\]]" | grep -vE 'lr_in_admission|lr_in_ip_input'], [1], [])

AT_CLEANUP
])

# This test case tests that when a logical switch has load balancers associated
# (with VIPs configured), the below logical flow is added by ovn-northd.
# table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[0]] = 1; next;)
# This test case is added for the BZ -
# https://bugzilla.redhat.com/show_bug.cgi?id=1849162
#
# ovn-northd was not adding the above lflow if the last load balancer associated
# to the logical switch doesn't have the VIP configured even if other load
# balancers before the last one in the last have VIPs configured.
# So make sure that the above lflow is added even if one load balancer has VIP
# associated.

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- Load balancer - missing ls_out_pre_lb flows])
ovn_start

ovn-nbctl ls-add sw0
ovn-nbctl lsp-add sw0 sw0-p1

ovn-nbctl lb-add lb1 "10.0.0.10" "10.0.0.3"
ovn-nbctl lb-add lb2 "10.0.0.11" "10.0.0.4"

ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
])

ovn-nbctl ls-lb-add sw0 lb1
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[0]] = 1; next;)
])

ovn-nbctl ls-lb-add sw0 lb2
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[0]] = 1; next;)
])

lb1_uuid=$(ovn-nbctl --bare --columns _uuid find load_balancer name=lb1)
lb2_uuid=$(ovn-nbctl --bare --columns _uuid find load_balancer name=lb2)

ovn-nbctl clear load_balancer $lb1_uuid vips
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[0]] = 1; next;)
])

ovn-nbctl clear load_balancer $lb2_uuid vips
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
])

ovn-nbctl set load_balancer $lb1_uuid vips:"10.0.0.10"="10.0.0.3"
ovn-nbctl set load_balancer $lb2_uuid vips:"10.0.0.11"="10.0.0.4"

ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[0]] = 1; next;)
])

# Now reverse the order of clearing the vip.
ovn-nbctl clear load_balancer $lb2_uuid vips
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[0]] = 1; next;)
])

ovn-nbctl clear load_balancer $lb1_uuid vips
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ignore_lsp_down])
ovn_start

ovn-nbctl ls-add sw0
ovn-nbctl lsp-add sw0 sw0-p1 -- lsp-set-addresses sw0-p1 "aa:aa:aa:aa:aa:aa 10.0.0.1"

ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep arp | grep 10\.0\.0\.1], [1], [ignore])

ovn-nbctl --wait=sb set NB_Global . options:ignore_lsp_down=true
AT_CHECK([ovn-sbctl lflow-list | grep arp | grep 10\.0\.0\.1], [0], [ignore])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([datapath requested-tnl-key])
AT_KEYWORDS([requested tnl tunnel key keys])
ovn_start

get_tunnel_keys() {
    set $(ovn-sbctl get datapath_binding ls0 tunnel_key \
                 -- get datapath_binding ls1 tunnel_key \
                 -- get datapath_binding ls2 tunnel_key)
    echo "ls0=$ls0 ls1=$ls1 ls2=$ls2"
    ls0=$1 ls1=$2 ls2=$3
    AT_CHECK([test "$ls0" != "$ls1" && \
              test "$ls1" != "$ls2" && \
              test "$ls0" != "$ls2"])
}

echo
echo "__file__:__line__: Add three logical switches, check tunnel ids"
AT_CHECK(
  [ovn-nbctl --wait=sb ls-add ls0
   ovn-nbctl --wait=sb ls-add ls1
   ovn-nbctl --wait=sb ls-add ls2])
get_tunnel_keys
AT_CHECK([test $ls0 = 1 && test $ls1 = 2 && test $ls2 = 3])

echo
echo "__file__:__line__: Assign ls0 new tunnel key, others don't change."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch ls0 other-config:requested-tnl-key=4])
get_tunnel_keys
AT_CHECK([test $ls0 = 4 && test $ls1 = 2 && test $ls2 = 3])

echo
echo "__file__:__line__: Assign ls0 a conflict with ls1, which moves aside."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch ls0 other-config:requested-tnl-key=2])
get_tunnel_keys
AT_CHECK([test $ls0 = 2 && test $ls2 = 3])

echo
echo "__file__:__line__: Assign ls0 and ls1 conflicts and verify that they end up different and ls2 doesn't change."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch ls1 other-config:requested-tnl-key=2])
get_tunnel_keys
AT_CHECK([test $ls2 = 3])
AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([port requested-tnl-key])
AT_KEYWORDS([requested tnl tunnel key keys])
ovn_start

get_tunnel_keys() {
    set $(ovn-sbctl get port_binding lsp00 tunnel_key \
                 -- get port_binding lsp01 tunnel_key \
                 -- get port_binding lsp02 tunnel_key \
                 -- get port_binding lsp10 tunnel_key \
                 -- get port_binding lsp11 tunnel_key \
                 -- get port_binding lsp12 tunnel_key)
    lsp00=$1 lsp01=$2 lsp02=$3 lsp10=$4 lsp11=$5 lsp12=$6
    ls0=$1$2$3 ls1=$4$5$6
    echo "ls0=$1$2$3 ls1=$4$5$6"
    AT_CHECK([test "$lsp00" != "$lsp01" && \
              test "$lsp01" != "$lsp02" && \
              test "$lsp00" != "$lsp02"])
    AT_CHECK([test "$lsp10" != "$lsp11" && \
              test "$lsp11" != "$lsp12" && \
              test "$lsp10" != "$lsp12"])
}

echo
echo "__file__:__line__: Add two logical switches with three ports each, check tunnel ids"
AT_CHECK(
  [for i in 0 1; do
       ovn-nbctl --wait=sb ls-add ls$i || exit $?
       for j in 0 1 2; do
           ovn-nbctl --wait=sb lsp-add ls$i lsp$i$j || exit $?
       done
   done])
get_tunnel_keys
AT_CHECK([test $ls0 = 123 && test $ls1 = 123])

echo
echo "__file__:__line__: Assign lsp00 new tunnel key, others don't change."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch-port lsp00 options:requested-tnl-key=4])
get_tunnel_keys
AT_CHECK([test $ls0 = 423 && test $ls1 = 123])

echo
echo "__file__:__line__: Assign lsp00 a conflict with lsp01, which moves aside."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch-port lsp00 options:requested-tnl-key=2])
get_tunnel_keys
AT_CHECK([test $lsp00 = 2 && test $lsp02 = 3 && test $ls1 = 123])

echo
echo "__file__:__line__: Assign lsp00 and lsp01 conflicts and verify that they end up different and lsp02 doesn't change."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch-port lsp01 options:requested-tnl-key=2])
get_tunnel_keys
AT_CHECK([test $lsp02 = 3 && test $ls1 = 123])
AT_CLEANUP
])

