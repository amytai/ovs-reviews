.\" -*- nroff -*-
.de IQ
.  br
.  ns
.  IP "\\$1"
..
.TH ovsdb\-idlc 1 "November 2009" "Open vSwitch" "Open vSwitch Manual"
.ds PN ovsdb\-idlc
.
.SH NAME
ovsdb\-idlc \- Open vSwitch IDL (Interface Definition Language) compiler
.
.SH SYNOPSIS
\fBovsdb\-idlc \fBannotate\fI schema annotations\fR
.br
\fBovsdb\-idlc \fBc\-idl\-header\fI idl\fR
.br
\fBovsdb\-idlc \fBc\-idl\-source\fI idl\fR
.br
\fBovsdb\-idlc \-\-help\fR
.br
\fBovsdb\-idlc \-\-version\fR
.
.SH DESCRIPTION
The \fBovsdb\-idlc\fR program is a command-line tool for translating
Open vSwitch database interface definition language (IDL) schemas into
other formats.  It is used while building Open vSwitch, not at
installation or configuration time.  Thus, it is not normally
installed as part of Open vSwitch.
.
.PP
The \fIidl\fR files used as input for most \fBovsdb\-idlc\fR commands
have the same format as the OVSDB schemas, specified in the OVSDB
specification, with a few additions:
.
.IP "\fB""\fBidlPrefix\fR"" member of <database-schema>"
This member, which is required, specifies a string that is prefixed to
top-level names in C bindings.  It should probably end in an
underscore.
.
.IP "\fB""\fBidlHeader\fR"" member of <database-schema>"
This member, which is required, specifies the name of the IDL header.
It will be output on an \fB#include\fR line in the source file
generated by the C bindings.  It should include the bracketing
\fB""\fR or \fB<>\fR.
.
.IP "\fB""\fBcDecls\fR"" member of <database-schema>"
.IQ "\fB""\fBhDecls\fR"" member of <database-schema>"
These optional members may specify arbitrary code to include in the
generated \fB.c\fR or \fB.h\fR file, respectively, in each case just
after the \fB#include\fR directives in those files.
.
.IP "\fB""\fBextensions\fR"" member of <table-schema>"
.IQ "\fB""\fBextensions\fR"" member of <column-schema>"
This member is optional.  If specified, it is an object whose contents
describes extensions to the OVSDB schema language, for the purpose of
specifying interpretation by the IDL.
.
.IP "\fB""\fBinjective\fR"" member of \fBextensions\fR object"
This optional member may be present in a column
\fIC\fR in table \fIT1\fR that contains references to rows in a
distinct table \fIT2\fR.  When enabled, the IDL ensures that the
references in \fIC\fR from every row in \fIT1\fR refer to any given
row in \fIT2\fR at most once.  That is, this feature ensures that
\fIC\fR is an injective (``one-to-one'') mapping from rows in \fIT1\fR
to rows in \fIT2\fR.  OVSDB strong references and garbage collection
can constrain such a mapping to be surjective (``onto''), so that
taken together these features ensure a bijective (one-to-one and onto)
relationship between table rows.
.IP
The value for this member should be a string that matches <id> from
RFC 7047.  The IDL adds to \fIT2\fR a column with this name and type
``strong reference to \fIT1\fR'' and automatically maintains it at
runtime so that it always points back to the instance of \fIT1\fR that
refers to it.  The injectivity constraint guarantees that this is a
unique relationship; if the mapping is also constrained to be
surjective, then the pointer will also always be nonnull.
.IP
The OVSDB protocol and \fBovsdb\-server\fR(1) do not support an
injectivity constraint.  The IDL implements such a constraint by
checking for duplicate references and deleting them, leaving only a
single reference from the row in \fIT1\fR with the lexicographically
lowest UUID.  This deletion is transparent to the IDL's client, which
never observes the database in a state that violates the injectivity
constraint.
.
.IP "\fB""\fBsynthetic\fR"" member of \fBextensions\fR object"
If this optional member is set to \fBtrue\fR, then it indicates that
the column is not expected to be found in the actual database.
Instead, code supplied by the IDL's client fills in the desired
structure members based on the value of one or more other database
columns.  This can be used to cache the result of a calculation, for
example.
.SS "Commands"
.IP "\fBannotate\fI schema annotations\fR"
Reads \fIschema\fR, which should be a file in JSON format (ordinarily
an OVSDB schema file), then reads and executes the Python syntax
fragment in \fIannotations\fR.  The Python syntax fragment is passed
the JSON object as a local variable named \fBs\fR.  It may modify this
data in any way.  After the Python code returns, the object as
modified is re-serialized as JSON on standard output.
.
.IP "\fBc\-idl\-header\fI idl\fR"
Reads \fIidl\fR and prints on standard output a C header file that
defines a structure for each table defined by the schema.
.
.IP "\fBc\-idl\-source\fI idl\fR"
Reads \fIidl\fR and prints on standard output a C source file that
implements C bindings for the database defined by the schema.
.
.SS "Options"
.so lib/common.man
.
.SH "BUGS"
\fBovsdb\-idlc\fR is more lenient about the format of OVSDB schemas
than other OVSDB tools.  It may successfully parse schemas that, e.g.,
\fBovsdb\-tool\fR rejects.
.
.SH "SEE ALSO"
The OVSDB specification.
