/*
 * Copyright (c) 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016 Nicira, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OPENVSWITCH_PACKETS_H
#define OPENVSWITCH_PACKETS_H 1

#include <netinet/in.h>
#include "openvswitch/tun-metadata.h"
#include "openvswitch/util.h"

/* Tunnel information used in flow key and metadata. */
struct flow_tnl {
    ovs_be32 ip_dst;
    struct in6_addr ipv6_dst;
    ovs_be32 ip_src;
    struct in6_addr ipv6_src;
    ovs_be64 tun_id;
    uint16_t flags;
    uint8_t ip_tos;
    uint8_t ip_ttl;
    ovs_be16 tp_src;
    ovs_be16 tp_dst;
    ovs_be16 gbp_id;
    uint8_t  gbp_flags;
    uint8_t  pad1[5];        /* Pad to 64 bits. */
    struct tun_metadata metadata;
};

/* Some flags are exposed through OpenFlow while others are used only
 * internally. */

/* Public flags */
#define FLOW_TNL_F_OAM (1 << 0)

#define FLOW_TNL_PUB_F_MASK ((1 << 1) - 1)

/* Private flags */
#define FLOW_TNL_F_DONT_FRAGMENT (1 << 1)
#define FLOW_TNL_F_CSUM (1 << 2)
#define FLOW_TNL_F_KEY (1 << 3)

#define FLOW_TNL_F_MASK ((1 << 4) - 1)

/* Unfortunately, a "struct flow" sometimes has to handle OpenFlow port
 * numbers and other times datapath (dpif) port numbers.  This union allows
 * access to both. */
union flow_in_port {
    odp_port_t odp_port;
    ofp_port_t ofp_port;
};

//::  for header_name in ordered_header_instances_non_virtual:
//::    header_len = sum([bit_width for _, bit_width in ohinvafnw[header_name]])/8
#define ${header_name.upper()}_HEADER_LEN ${header_len}
#define ${header_name.upper()}_PADDED_LEN ROUND_UP(${header_len}, 8)
//::  #endfor
#define VALID_HEADER_LEN ${len(ordered_header_instances_regular)}

//::  for header_name in ordered_header_instances_non_virtual:
//::    run_bit_width = 0
OVS_PACKED(
struct ${header_name}_header {
//::    for field_name, bit_width in ohinvafnw[header_name]:
//::      if bit_width in [8, 16, 32, 64]:
    uint${bit_width}_t ${field_name};
//::      else:
//::        # We assume that all fields are, at least, byte aligned.
    struct ${field_name}_t ${field_name};
//::      #endif
//::      run_bit_width += bit_width
//::    #endfor
});
BUILD_ASSERT_DECL(${header_name.upper()}_HEADER_LEN == sizeof(struct ${header_name}_header));

struct ${header_name}_padded_header {
    PADDED_MEMBERS(8, struct ${header_name}_header hdr;);
};
BUILD_ASSERT_DECL(${header_name.upper()}_PADDED_LEN == sizeof(struct ${header_name}_padded_header));

//::  #endfor
//::
struct valid_header {
//::  for header_name in ordered_header_instances_regular:
    uint8_t ${header_name}_valid;
//::  #endfor
};
BUILD_ASSERT_DECL(VALID_HEADER_LEN == sizeof(struct valid_header));

struct valid_padded_header {
    PADDED_MEMBERS(8, struct valid_header hdr;);
};

#endif /* packets.h */
