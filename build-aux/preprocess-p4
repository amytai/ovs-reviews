#! /bin/sh

usage="$0: preprocesses input through p4c-behavioral given a particular P4 program
usage: $0 SRCDIR P4 INPUT > OUTPUT
where SRCDIR is the OVS source directory,
      P4 is the P4 program,
      INPUT is the file to preprocess,
      and OUTPUT is on stdout."
if test "$1" = --help; then
    echo >& 2"$usage"
    exit 0
elif test $# != 3; then
    echo >&2 "$usage"
    exit 1
fi

srcdir=$1
p4=$2
input=$3
input_base=$(basename "$input")

: ${P4C_BEHAVIORAL=p4c-behavioral}

rm -rf tmp$$
trap "rm -rf tmp$$" 0 1 2 3 13 14 15

mkdir tmp$$ tmp$$/ovs || exit $?
cp "$srcdir"/include/p4/plugin/helpers.py tmp$$ || exit $?
header="$srcdir"/include/p4/header.p4c
{ echo '/* -*- mode: c; buffer-read-only: t -*- */'
  echo "#line 1 \"$header\"" && cat "$header" &&
  echo "#line 1 \"$input\"" && cat "$input"
} > tmp$$/ovs/"$input_base" || exit $?

# p4c-behavioral spews a lot of crap on stdout by default, which we
# suppress if Automake is in non-verbose mode (which can be the
# default if OVS was configured with --enable-silent-rules).
export PYTHONPATH=$srcdir/include/p4/plugin:$PYTHONPATH
echo >&2 $PYTHONPATH
set ${P4C_BEHAVIORAL} $p4 --gen-dir tmp$$/output --plugin-path tmp$$ --plugin ovs
if ${AM_V_P-:}; then
    # Verbose mode (e.g. V=1).
    "$@" >&2
else
    # Non-verbose mode (e.g. V=0).
    #
    # We save the output anyway, then dump it to stderr if there was a real
    # error.
    "$@" >tmp$$/stdout 2>&1 || { rc=$?; cat >&2 tmp$$/stdout; exit $rc; }
fi

cat tmp$$/output/plugin/ovs/"${input_base%.h}"
